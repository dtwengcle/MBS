/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package medicine_bs;

import config.connectDB;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Markj
 */
public class ForgotPassword extends javax.swing.JFrame {
    private connectDB db;
    private String userId;
    private String securityQuestion;
    private String securityAnswer;
    private boolean isVerified = false;
    private Connection conn = null;  // Add connection as class field

    /**
     * Creates new form ForgotPassword
     */
    public ForgotPassword() {
        initComponents();
        db = new connectDB();
        // Initially hide password fields until verification
        newPassField.setEnabled(false);
        confirmPassField.setEnabled(false);
        submitAnswerButton.setEnabled(false);
        submitButton.setEnabled(false);
        questionLabel.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        answerField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        newPassField = new javax.swing.JPasswordField();
        confirmPassField = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        checkEmailButton = new javax.swing.JButton();
        submitAnswerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Security Answer:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        questionLabel.setText("Question");
        jPanel1.add(questionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        jLabel3.setText("Security Question:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        answerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerFieldActionPerformed(evt);
            }
        });
        jPanel1.add(answerField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 140, -1));

        submitButton.setText("Submit");
        submitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitButtonMouseClicked(evt);
            }
        });
        jPanel1.add(submitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, -1, -1));

        jLabel4.setText("New Password:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));
        jPanel1.add(newPassField, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, 170, -1));

        confirmPassField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPassFieldActionPerformed(evt);
            }
        });
        jPanel1.add(confirmPassField, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, 170, -1));

        jLabel5.setText("Confirm Password:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, -1, -1));

        jLabel2.setText("Email Address:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));
        jPanel1.add(emailField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 140, -1));

        checkEmailButton.setText("Check Email");
        checkEmailButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkEmailButtonMouseClicked(evt);
            }
        });
        jPanel1.add(checkEmailButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        submitAnswerButton.setText("Submit Answer");
        submitAnswerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitAnswerButtonMouseClicked(evt);
            }
        });
        jPanel1.add(submitAnswerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void answerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerFieldActionPerformed
        // TODO add your handling code here:
        verifySecurityAnswer();
    }//GEN-LAST:event_answerFieldActionPerformed

    private void submitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitButtonMouseClicked
        // TODO add your handling code here:
        if (!isVerified) {
            verifySecurityAnswer();
        } else {
            updatePassword();
        }
    }//GEN-LAST:event_submitButtonMouseClicked

    private void confirmPassFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmPassFieldActionPerformed
        // TODO add your handling code here:
        updatePassword();
    }//GEN-LAST:event_confirmPassFieldActionPerformed

    private void checkEmailButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkEmailButtonMouseClicked
        // TODO add your handling code here:
        String email = emailField.getText().trim();
        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your email address.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            // Close existing connection if any
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }

            // Get new connection
            conn = db.getConnection();
            if (conn == null) {
                JOptionPane.showMessageDialog(this, 
                    "Database connection failed!", 
                    "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String query = "SELECT id, security_question, security_answer FROM users WHERE email = ?";
            pst = conn.prepareStatement(query);
            pst.setString(1, email);
            rs = pst.executeQuery();

            if (rs.next()) {
                userId = rs.getString("id");
                securityQuestion = rs.getString("security_question");
                securityAnswer = rs.getString("security_answer");

                if (securityQuestion == null || securityQuestion.isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "No security question set for this account. Please contact administrator.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                    questionLabel.setText("");
                    answerField.setEnabled(false);
                    submitAnswerButton.setEnabled(false);
                    submitButton.setEnabled(false);
                } else {
                    questionLabel.setText(securityQuestion);
                    answerField.setEnabled(true);
                    submitAnswerButton.setEnabled(true);
                    submitButton.setEnabled(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No account found with this email address.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
                questionLabel.setText("");
                answerField.setEnabled(false);
                submitAnswerButton.setEnabled(false);
                submitButton.setEnabled(false);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Database error: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
            questionLabel.setText("");
            answerField.setEnabled(false);
            submitAnswerButton.setEnabled(false);
            submitButton.setEnabled(false);
            ex.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                // Don't close the connection here
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_checkEmailButtonMouseClicked

    private void submitAnswerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitAnswerButtonMouseClicked
        // TODO add your handling code here:
        if (userId == null || securityAnswer == null) {
            JOptionPane.showMessageDialog(this, 
                "Please check your email first.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String answer = answerField.getText().trim();
        if (answer.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please enter your security answer.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (answer.equalsIgnoreCase(securityAnswer)) {
            isVerified = true;
            newPassField.setEnabled(true);
            confirmPassField.setEnabled(true);
            submitButton.setEnabled(true);
            submitAnswerButton.setEnabled(false);
            answerField.setEnabled(false);
            JOptionPane.showMessageDialog(this, 
                "Security answer verified. Please enter your new password.", 
                "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, 
                "Incorrect security answer.", 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_submitAnswerButtonMouseClicked

    private void verifyEmail() {
        String email = emailField.getText().trim();
        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your email address.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (userId == null || securityQuestion == null || securityQuestion.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please check your email first.", 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void verifySecurityAnswer() {
        if (userId == null || securityAnswer == null) {
            JOptionPane.showMessageDialog(this, 
                "Please enter your email first.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String answer = answerField.getText().trim();
        if (answer.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please enter your security answer.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (answer.equalsIgnoreCase(securityAnswer)) {
            isVerified = true;
            newPassField.setEnabled(true);
            confirmPassField.setEnabled(true);
            submitButton.setEnabled(true);
            submitAnswerButton.setEnabled(false);
            answerField.setEnabled(false);
            JOptionPane.showMessageDialog(this, 
                "Security answer verified. Please enter your new password.", 
                "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, 
                "Incorrect security answer.", 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updatePassword() {
        if (!isVerified) {
            JOptionPane.showMessageDialog(this, 
                "Please verify your security answer first.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String newPassword = new String(newPassField.getPassword());
        String confirmPassword = new String(confirmPassField.getPassword());

        if (newPassword.isEmpty() || confirmPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please enter and confirm your new password.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!newPassword.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, 
                "Passwords do not match.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String passwordRegex = "^.{6,}$";
        if (!newPassword.matches(passwordRegex)) {
            JOptionPane.showMessageDialog(this, 
                "Password must be at least 6 characters long.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }


        // Hash the new password
        String hashedPassword = hashPassword(newPassword);
        if (hashedPassword == null) {
            JOptionPane.showMessageDialog(this, 
                "Error hashing password!", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        PreparedStatement pst = null;
        try {
            if (conn == null || conn.isClosed()) {
                conn = db.getConnection();
                if (conn == null) {
                    JOptionPane.showMessageDialog(this, 
                        "Database connection failed!", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            String query = "UPDATE users SET password = ? WHERE id = ?";
            pst = conn.prepareStatement(query);
            pst.setString(1, hashedPassword);
            pst.setString(2, userId);
            
            int result = pst.executeUpdate();
            if (result == 1) {
                JOptionPane.showMessageDialog(this, 
                    "Password updated successfully! Please login with your new password.", 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
                new LOGIN().setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Failed to update password. Please try again.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Database error: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } finally {
            try {
                if (pst != null) pst.close();
                if (conn != null) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ForgotPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ForgotPassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerField;
    private javax.swing.JButton checkEmailButton;
    private javax.swing.JPasswordField confirmPassField;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField newPassField;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JButton submitAnswerButton;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
